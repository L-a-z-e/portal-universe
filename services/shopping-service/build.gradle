plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.portal.universe'
version = '0.0.1-SNAPSHOT'
description = 'shopping-service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    // Spring Cloud의 버전 관리를 위한 변수
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    // =======================================
    // Internal Libraries
    // =======================================
    implementation project(':services:common-library') // 공통 예외 처리, 응답 형식 등

    // =======================================
    // Spring Cloud & Microservice Core
    // =======================================
    implementation 'org.springframework.cloud:spring-cloud-starter-config' // Externalized Configuration
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client' // Service Discovery
    // 다른 마이크로서비스의 API를 호출하기 위한 선언적 REST 클라이언트
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // =======================================
    // Web & Data
    // =======================================
    implementation 'org.springframework.boot:spring-boot-starter-web' // Spring Web (MVC)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // Spring Data JPA
    runtimeOnly 'com.mysql:mysql-connector-j' // MySQL Driver

    // =======================================
    // Security (OAuth2 Resource Server)
    // =======================================
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' // JWT 토큰 검증
    implementation 'org.springframework.security:spring-security-oauth2-jose' // JOSE (Javascript Object Signing and Encryption)

    // =======================================
    // Observability (Monitoring & Tracing)
    // =======================================
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // Health Check, Metrics
    implementation 'io.micrometer:micrometer-registry-prometheus' // Prometheus-compatible metrics
    implementation 'io.micrometer:micrometer-tracing-bridge-brave' // Distributed Tracing (Brave)
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave' // Tracing data reporter for Zipkin

    // =======================================
    // Development Tools
    // =======================================
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // =======================================
    // Testing
    // =======================================
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter' // Integration tests with Docker containers
    testImplementation 'org.testcontainers:mysql' // MySQL container for testing
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Spring Cloud 종속성 버전 관리를 위한 BOM(Bill of Materials)
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}