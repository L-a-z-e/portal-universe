services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=auth_db, shopping_db
      - MYSQL_USER=laze
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_HOST=%
    networks:
      - portal-universe-net

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=laze
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - portal-universe-net

  kafka:
    image: apache/kafka:4.1.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-kafka-logs
      KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
    networks:
      - portal-universe-net

  discovery-service:
    build:
      context: .
      dockerfile: ./services/discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - portal-universe-net

  config-service:
    build:
      context: .
      dockerfile: ./services/config-service/Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:/config-repo/
    volumes:
      - ./config-repo:/config-repo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - portal-universe-net

  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - portal-universe-net

  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    container_name: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      mysql-db:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - portal-universe-net

  blog-service:
    build:
      context: .
      dockerfile: ./services/blog-service/Dockerfile
    container_name: blog-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - portal-universe-net

  shopping-service:
    build:
      context: .
      dockerfile: ./services/shopping-service/Dockerfile
    container_name: shopping-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      mysql-db:
        condition: service_started
    networks:
      - portal-universe-net

  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - portal-universe-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - portal-universe-net

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - portal-universe-net


volumes:
  mysql-data:
  mongo-data:
networks:
  portal-universe-net: