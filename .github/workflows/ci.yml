name: Portal Universe CI

# Workflow를 실행할 조건
on:
  push:
    branches:
      - main              # main 브랜치에 push 시
      - develop           # develop 브랜치에 push 시
  pull_request:
    branches:
      - main              # main으로 PR 생성 시

# 동시 실행 제어
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # 이전 빌드 취소

# 실행할 작업들
jobs:
  # Job 1: 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest  # GitHub 제공 Ubuntu 환경

    steps:
      # Step 1: 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Java 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Gradle 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 5: 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Step 6: 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # Step 7: 테스트 결과 업로드 (실패 시에도 실행)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/test-results/test/*.xml
            **/build/reports/tests/test/

  # Job 2: Docker 이미지 빌드 및 푸시
  build-and-push-docker:
    name: Build and Push Docker Images
    needs: build-and-test  # 테스트 통과 후에만 실행
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # main 브랜치 push 시만

    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - blog-service
          - shopping-service
          - notification-service
          - config-service
          - discovery-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build service
        run: ./gradlew :services:${{ matrix.service }}:build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/portal-universe-${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max